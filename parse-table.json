{
  "S": {
    "program": 1
  },
  "TOP-LEVEL-BLOCK": {
    "begin": 2,
    "const": 4,
    "function": 5,
    "procedure": 6,
    "var": 3
  },
  "TOP-LEVEL-BLOCK-OR-END": {
    "dot": 7,
    "semicolon": 8
  },
  "FUNCTION": {
    "function": 9
  },
  "FUNC-PROC-BODY": {
    "begin": 11,
    "const": 11,
    "forward": 10,
    "var": 11
  },
  "FUNCTION-BLOCKS&": {
    "begin": 12,
    "const": 14,
    "var": 13,
    "ε": 12
  },
  "PROCEDURE": {
    "procedure": 15
  },
  "FUNCALL": {
    "symbol": 16
  },
  "FUNCALL-ARGS": {
    "lparen": 17
  },
  "FUNCALL-ARGS-INNER": {
    "add": 19,
    "false": 19,
    "lparen": 19,
    "number": 19,
    "rparen": 18,
    "string": 19,
    "sub": 19,
    "symbol": 19,
    "true": 19,
    "ε": 18
  },
  "FUNCALL-ARGS-INNER2": {
    "comma": 21,
    "rparen": 20,
    "ε": 20
  },
  "NUMBER-ARRAY-INDEX": {
    "number": 22,
    "sub": 23
  },
  "ARRAY-DECL": {
    "array": 24
  },
  "TYPE-SPECIFIER": {
    "array": 25,
    "integer-TYPE": 26,
    "string-TYPE": 26
  },
  "TYPE-LITERAL": {
    "integer-TYPE": 27,
    "string-TYPE": 28
  },
  "ARGLIST": {
    "lparen": 29
  },
  "ARGLIST-INNER": {
    "rparen": 30,
    "symbol": 31,
    "ε": 30
  },
  "ARGLIST-INNER2": {
    "rparen": 32,
    "semicolon": 33,
    "ε": 32
  },
  "ARG-DECL": {
    "symbol": 34
  },
  "CONST-BLOCK": {
    "const": 35
  },
  "CONST-DECL": {
    "symbol": 36
  },
  "CONST-DECLS&": {
    "begin": 37,
    "const": 37,
    "function": 37,
    "procedure": 37,
    "symbol": 38,
    "var": 37,
    "ε": 37
  },
  "VAR-BLOCK": {
    "var": 39
  },
  "VAR-DECL": {
    "symbol": 40
  },
  "VAR-NAMES&": {
    "colon": 41,
    "comma": 42,
    "ε": 41
  },
  "VAR-DECLS&": {
    "begin": 43,
    "const": 43,
    "function": 43,
    "procedure": 43,
    "symbol": 44,
    "var": 43,
    "ε": 43
  },
  "INDEX-OP": {
    "symbol": 45
  },
  "INDEX-OP-INNER": {
    "lbracket": 46
  },
  "EXPR": {
    "add": 47,
    "false": 47,
    "lparen": 47,
    "number": 47,
    "string": 47,
    "sub": 47,
    "symbol": 47,
    "true": 47
  },
  "EXPR-OR": {
    "add": 48,
    "false": 48,
    "lparen": 48,
    "number": 48,
    "string": 48,
    "sub": 48,
    "symbol": 48,
    "true": 48
  },
  "EXPR-OR'": {
    "comma": 49,
    "do": 49,
    "downto": 49,
    "else": 49,
    "end": 49,
    "or": 50,
    "rbracket": 49,
    "rparen": 49,
    "semicolon": 49,
    "then": 49,
    "to": 49,
    "ε": 49
  },
  "EXPR-AND": {
    "add": 51,
    "false": 51,
    "lparen": 51,
    "number": 51,
    "string": 51,
    "sub": 51,
    "symbol": 51,
    "true": 51
  },
  "EXPR-AND'": {
    "and": 53,
    "comma": 52,
    "do": 52,
    "downto": 52,
    "else": 52,
    "end": 52,
    "or": 52,
    "rbracket": 52,
    "rparen": 52,
    "semicolon": 52,
    "then": 52,
    "to": 52,
    "ε": 52
  },
  "EXPR-EQ-NE": {
    "add": 54,
    "false": 54,
    "lparen": 54,
    "number": 54,
    "string": 54,
    "sub": 54,
    "symbol": 54,
    "true": 54
  },
  "EXPR-EQ-NE'": {
    "and": 55,
    "comma": 55,
    "do": 55,
    "downto": 55,
    "else": 55,
    "end": 55,
    "eq": 56,
    "ne": 57,
    "or": 55,
    "rbracket": 55,
    "rparen": 55,
    "semicolon": 55,
    "then": 55,
    "to": 55,
    "ε": 55
  },
  "EXPR-CMP": {
    "add": 58,
    "false": 58,
    "lparen": 58,
    "number": 58,
    "string": 58,
    "sub": 58,
    "symbol": 58,
    "true": 58
  },
  "EXPR-CMP'": {
    "and": 59,
    "comma": 59,
    "do": 59,
    "downto": 59,
    "else": 59,
    "end": 59,
    "eq": 59,
    "ge": 63,
    "gt": 62,
    "le": 61,
    "lt": 60,
    "ne": 59,
    "or": 59,
    "rbracket": 59,
    "rparen": 59,
    "semicolon": 59,
    "then": 59,
    "to": 59,
    "ε": 59
  },
  "EXPR-ADD": {
    "add": 64,
    "false": 64,
    "lparen": 64,
    "number": 64,
    "string": 64,
    "sub": 64,
    "symbol": 64,
    "true": 64
  },
  "EXPR-ADD'": {
    "add": 66,
    "and": 65,
    "comma": 65,
    "do": 65,
    "downto": 65,
    "else": 65,
    "end": 65,
    "eq": 65,
    "ge": 65,
    "gt": 65,
    "le": 65,
    "lt": 65,
    "ne": 65,
    "or": 65,
    "rbracket": 65,
    "rparen": 65,
    "semicolon": 65,
    "sub": 67,
    "then": 65,
    "to": 65,
    "ε": 65
  },
  "EXPR-MUL": {
    "add": 68,
    "false": 68,
    "lparen": 68,
    "number": 68,
    "string": 68,
    "sub": 68,
    "symbol": 68,
    "true": 68
  },
  "EXPR-MUL'": {
    "add": 69,
    "and": 69,
    "comma": 69,
    "div": 71,
    "do": 69,
    "downto": 69,
    "else": 69,
    "end": 69,
    "eq": 69,
    "ge": 69,
    "gt": 69,
    "le": 69,
    "lt": 69,
    "mod": 72,
    "mul": 70,
    "ne": 69,
    "or": 69,
    "rbracket": 69,
    "rparen": 69,
    "semicolon": 69,
    "sub": 69,
    "then": 69,
    "to": 69,
    "ε": 69
  },
  "EXPR-UNARY": {
    "add": 74,
    "false": 73,
    "lparen": 73,
    "number": 73,
    "string": 73,
    "sub": 75,
    "symbol": 73,
    "true": 73
  },
  "EXPR-L0": {
    "false": 76,
    "lparen": 77,
    "number": 76,
    "string": 76,
    "symbol": 78,
    "true": 76
  },
  "EXPR-SYM'": {
    "add": 79,
    "and": 79,
    "comma": 79,
    "div": 79,
    "do": 79,
    "downto": 79,
    "else": 79,
    "end": 79,
    "eq": 79,
    "ge": 79,
    "gt": 79,
    "lbracket": 80,
    "le": 79,
    "lparen": 81,
    "lt": 79,
    "mod": 79,
    "mul": 79,
    "ne": 79,
    "or": 79,
    "rbracket": 79,
    "rparen": 79,
    "semicolon": 79,
    "sub": 79,
    "then": 79,
    "to": 79,
    "ε": 79
  },
  "LITERAL": {
    "false": 85,
    "number": 83,
    "string": 82,
    "true": 84
  },
  "FOR-LOOP": {
    "for": 86
  },
  "FOR-LOOP-TAIL": {
    "downto": 88,
    "to": 87
  },
  "WHILE-LOOP": {
    "while": 89
  },
  "ASSIGNMENT": {
    "symbol": 90
  },
  "ASSIGNMENT-RST": {
    "assign": 91,
    "lbracket": 92
  },
  "IF-ELSE-BLOCK": {
    "if": 93
  },
  "ELSE-BRANCH&": {
    "else": 95,
    "end": 94,
    "semicolon": 94,
    "ε": 94
  },
  "PROCEDURAL-BLOCK": {
    "begin": 100,
    "break": 102,
    "continue": 103,
    "exit": 101,
    "for": 96,
    "if": 98,
    "symbol": 99,
    "while": 97
  },
  "FUNCALL-OR-ASSIGNMENT": {
    "symbol": 104
  },
  "FUNCALL-OR-ASSIGNMENT-RST": {
    "assign": 105,
    "lbracket": 105,
    "lparen": 106
  },
  "BEGIN-END-BLOCK": {
    "begin": 107
  },
  "BEGIN-END-BLOCK-RST": {
    "end": 108,
    "semicolon": 109,
    "ε": 108
  },
  "BEGIN-END-BLOCK-REC": {
    "begin": 111,
    "break": 111,
    "continue": 111,
    "end": 110,
    "exit": 111,
    "for": 111,
    "if": 111,
    "symbol": 111,
    "while": 111,
    "ε": 110
  }
}